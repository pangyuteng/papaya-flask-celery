version: '3'
services:
    redis:
        image: redis:latest
        hostname: redis
        ports:
            - 6379:6379
        restart: always
    rabbitmq:
        image: rabbitmq:management
        hostname: rabbitmq
        ports:
            - 5672:5672
            - 15672:15672
        restart: always
    flower:
        image: myimage
        ports:
            - 5555:5555
        links:
            - rabbitmq
        command: flower --address=* --port=5555 --broker=amqp://rabbitmq:5672
        restart: always
    flask:
        environment:
            AMQP_URI: amqp://rabbitmq:5672
            REDIS_URI: redis://redis:6379/1
        build:
            context: .
            dockerfile: Dockerfile
        image: myimage
        volumes:
           - ${PWD}:/opt
        restart: always
        ports:
            - 5000:5000
        links:
            - redis
            - rabbitmq
        #command: python app.py
        #command: gunicorn --bind 0.0.0.0:5000 manage:app
        restart: always
        healthcheck:
            test: curl -f http://localhost:5000 || exit 1
            interval: 30s
            timeout: 10s
            retries: 3
    worker:
        environment:
            AMQP_URI: amqp://rabbitmq:5672
            REDIS_URI: redis://redis:6379/1
            C_FORCE_ROOT: "TRUE"
        image: myimage
        # TODO: use seperate compose file, check out 
        # https://docs.docker.com/compose/extends/
        volumes:
           - ${PWD}:/opt
        restart: always
        links:
            - flask
        #command: celery worker -A utils.celery --loglevel=INFO --pool=gevent --concurrency=2 --hostname=%h --broker=amqp://rabbitmq:5672
        healthcheck:
            test: celery inspect ping -b amqp://rabbitmq:5672 -d celery@$$HOSTNAME
            interval: 30s
            timeout: 10s
            retries: 0
